For deployment you have docker and K8S
CI CD Jenkins 
same way for your testing you have selenium cucumber even though you have all these tools there will be some small small activities which you want to do to help in your day-to-day 
which cannot be done by any of those tools like you want to send an e-mail OK 
Now you quickly want to connect to a machine and delete some files OK some of the day-to-day commands that you run right 
you want to automate them so in those cases installing and developing some kind of files in an automated tool will be very difficult 
so that’s when scripting is very much essential
one of the popular scripting is it’s a built-in option which comes along with your Linux system 
so all you have to do is create a file and put in your logic and things will work OK 
so that’s where it’s kind of necessary for all of us to know at least one kind of scripting 
and to get started shell scripting would be a good place and once you know the scripting concepts 
the same thing you can also apply to Python or go language or select as I said so that’s what is our agenda so today we’ll focus more on the core concepts of scripting 
before we get deep dive right let’s get into the basic first 
when you connect to a Linux machine through a command prompt or a terminal OK 
So what happens so you see a black screen 
So what is that screen so it's basically a shell OK 
a shell is nothing but a process or in generic way if you think it's an environment to communicate between the user and the operating system 
so that any commands that you want you give it through that the operating system will understand and the operating system will return the output through the same environment OK
so between us that is the users and the kernel or operating system shell access environment like for example today between you guys and me we are using this application 
like go to meeting which is helping us environment to communicate and share my screen 
same way for a Linux operating system we use an environment called basically 
shell is up process no anything we type in shall receives and sends it to the operating system or kernel 
and whatever the kernel gives back which is what you will be seeing it on the screen OK every time you connect to a Linux machine y
ou need a shell to interact with the operating system OK 
all the commands that you type is actually you're typing it on a particular shell now in Linux as of now even though we have lot of shells available like you have 
C shell SH or bash but we call it as bone again shell right one of the population that everyone uses in the market is bash 
so every time you connect to a Linux machine in the terminal what you get is a bash shell which is the one which helps us to interact OK
so now what do you do suppose you want to list some files create a folder right or you want to find some particular files then you open the command prompt in that 
bash shell you type in whatever the commands that you want in sequence and based on that you would be getting an output in the same shell so that's how you interact OK 
so remember that's the basics so anything you're interacting is through a shell and that's where now to do some activity there might be lot of commands that you have to run OK
so manually what you do as I was telling you go to that bash shell in the terminal and you type in all the commands one by one in the sequence and then you get the output 
so maybe you might have to run 3 commands or 4 commands or 10 commands depending on what you want to and that's when the scripting comes into the picture OK
so instead of we manually typing or entering the commands 1 by 1 and achieve a task we can put those commands whatever that we were typing in the shell 
which is basically what we call it as a script OK So what we will do so take a file which is basically a text file and in that text file you put the same sequence of commands
whatever that you have executed in the shell manually OK and then it's not just that you're going to put only 
the sequence of commands but you can also put some kind of logic on 
* when it has to run
* how it has to run OK 
* where it has to run 
so all those things you can also put together in the script and then you can execute so that execution becomes a automation OK
so that way now instead of you opening the terminal and running everything manually you can put the same sequence of commands with some logic into a file and 
whenever you want you execute that file or what we technically select is the script and that script will run those commands for you and based on the logic
what you have executed you will be getting the result so that is how we will be able to use a script and now what kind of commands I'm talking these are your Linux commands 
so your day-to-day Linux commands whatever you are going to use OK then this is when you take this file and put this Linux commands with some logic and execute 
what happens is it will also create a new shell remember this crucial for technically we call it as spawning a new shell 
which means every time similar to how you once again connect to the command prompt and open a bash shell now you put this into a file and execute 
what will happen the operating system will create a new shell so this is where the terminal in which you have connected and you are executing the file becomes the parent shell
the shell in which the commands that you have given in the script will get executed so those are called children shell OK 
so basically to run your script you still need a shell and inside that the commands with the logic will be executed the only difference is instead of you running it manually
anytime you execute the script a new shell will be created or spawned and all those commands will be executed OK 
so this is where to run your script on a Linux you need a shell and hence we call it as a shell scripting OK 
so very simple to understand so all those day-to-day commands in Linux whatever you are running if you want to automate put into a text file OK 
and you need to put some logic and run so that anytime you run it will open or create a new shell and it will be executing everything in it so thus you do the automation 
so now another basic what I'm just going to focus is to run your shell script you need a shell now it would be any type of the shell but as I said one of the publisher 
that we prefer as of novice fashion so from now on anytime when we say shell scripting you are opening a bash what shell and in that you're 
automating some commands to be running with some logic so that's what we need to and this is where whenever you're trying to write a shell script OK 
the first line that you will be putting up is something which starts with hash which is called as shebang and followed by bash OK 
so why do I need to specify this this is because now like I said you create a file which is just a text file and when you say run it the operating system needs to know what shell to create that is what child shell to create to run all your commands and that is where it is kind of mandatory where you will specify in the first line which shell to take so suppose if I leave something like this what is the meaning so in my machine we are saying for creating the child shell use bin bash and inside that bin bash whatever the commands and the logic I have given in the text file you take it and execute suppose if I say Bing search and the translation will be created using essential and in that it will be run OK so that's what you need to know OK now keep it in that way for now So what we will do before remove further and let me just show you that OK so this is a machine which I'm gonna use it for the rest of the session now first thing as I said in your shell script the first line what you're going to have is hashbang followed by what shell that you want using which your script is going to run OK and the second thing what you're going to do is the name of the file whichever I was talking which is going to act as a script you're going to end it with dot SH it's not mandatory but it's a good practice so that when you look at the file when it ends with dot SH you clearly know that it is a shell script OK so now create a file called basics dot SH call basic start message and anytime as I said so the first one you're going to put so the first line you'll always start with so you're telling the operating system to use what is that you will be having after this it's nothing but your Linux commands only so like LS CB fine echo right whatever that you're using day-to-day but along with that there will be some more logic OK so any Linux command that you are running directly on a command prompt by connecting to a machine the same thing you can put it here OK I'll put it as hello and another thing that you need to know is the commands that you put will be executed sequentially by default sequentially means one by one OK suppose if you have 10 lines it will try to execute one by one and sometimes it's actually scripting not a programming so each line can also be referred as a statement OK or code so generally what you have is just a normal command but some people might refer it as a statement or that's what we call it as a statement is nothing but each instruction that you are giving in the fight OK and these are the two things you need to know first line should be the Nash which tells which shell to take and second thing is the name of the file can be anything but end it with daughter search OK 
execute a script right no what do you mean by execution execution means you're going to run the script now to run the script there are different ways OK now it's very much important we also no when to use what OK now first thing in Linux if you have a fight and you want to execute it or run then it needs to have a permission called execute because basics of Linux what are the three permissions we have for a file read write and execute so that way if it is a script and you want to run it then you need to make sure you have execute permission no go back here so if you look at this file by default files will not have execute permission and that's where when you try to run this it will not be executed OK for example I'll just run it and moreover if you try Linux has option called tab as soon as you type something and put tab it will complete but here if you try it will not show because it's not a executable OK so you will get a permission denied why you do not have a execute permission so this is where if it's a self first thing you're going to do is execute permission and for that we will use a command called Ch mod plus X and the now look at the file so this is what you have your execute permission and now you can run the script OK select how do we run this is weird when you're going to run the script after giving the execute permission you can run it through the relative path or absolute path OK now where is my script on my current folder so if you want to refer to the current folder and say my script is locally and run it then you will say dot slash which means in the same folder I'm saying there is a file you run it and that's really what is happening when you just execute it it opens a bash shell runs the command and returns you the output now you will not see it here but if you go to the processes and check while it is running you will know which I'll show you and this is where when will you run this suppose if you have the script in the same folder you are going to run it OK now however you can also give the absolute path so absolute path me right from the root wherever it is there you can leave the complete folder and then you can run OK now in this example I'm under home Ubuntu and the file is there so you can say home slash basic start message run OK so you will run this dot whenever you are in the same folder as the script OK if not it will not work and if you are in any other folder you can refer to the complete path and you can run so this is called as relative method of running this is called as absolute method now this is another method I can just tell the name of the script OK so why is this failing even though I'm in the current folder when I say just the name it says command not found this is because when you say dot slash you're explicitly telling to run on the current folder but if not the basics of Linux is if you run any command search for that particular command or it's called as an executable OK so it will try to search for this in all the folders mentioned in a variable called path so this is where in Linux we have something called a path variable so here you can see there are some default folders available so it is not only shell script any command you run like you type LS PWD echo find OK what will happen Linux will search for that executable in all the folders what you have mentioned in this part video suppose if it is not available then it'll say it's not phone so that's the reason even though I am in that folder when I run this it is saying not found why because I don't have that available anywhere OK see it's not just script it's the basic of Linux so now if I add my own window folder to this path variable and then from wherever I run this picking it up OK now watch this now to set the variable I'll say export PATH=$PATH:/home/ubuntu so you see and now if I say basics dot SH it picks up so it circles in all the folder and finally when it finds here it will take it up and just to show you even I can go to some other folder and now if I run exactly so that's where in Linux it's not necessary that you should be in that folder if you add the folder where the script is to your path you can literally call it from anywhere because Linux will search for that executable in all the folders in the path so this is another way of executing OK so I'm coming back to the home directory executing it two ways and there is another method where you will see in which you will be giving a shell in the beginning followed by the name of the script now it could be SSH or it could be bash followed by the name of the script when do you do this now this is where sometimes in your shell script if you have not given this first line then what will happen that's where for example if I have not given this and then if I say as such and my script what it will do so Linux will first create a SH shell and inside that it will be running OK so whenever you have not given the first line like this then you can preferably use even though you have given how will this work first system or the operating system will create a such
